#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    connect(ui->actionSet_database,&QAction::triggered,this,&MainWindow::on_SetDbPara_clicked);
    connect(ui->pushButton_connect,&QPushButton::clicked,this,&MainWindow::on_connect_clicked);
    connect(ui->comboBox_pumpFamily,QOverload<const QString &>::of(&QComboBox::currentIndexChanged),this,&MainWindow::on_family_changed);
    connect(ui->comboBox_pumpModel,QOverload<const QString &>::of(&QComboBox::currentIndexChanged),this,&MainWindow::on_model_changed);
    connect(ui->comboBox_pumpSpeed,QOverload<const QString &>::of(&QComboBox::currentIndexChanged),this,&MainWindow::on_speed_changed);
    connect(ui->comboBox_motor,QOverload<const QString &>::of(&QComboBox::currentIndexChanged),this,&MainWindow::on_motor_changed);
    connect(ui->pushButton_update,&QPushButton::clicked,this,&MainWindow::on_update_clicked);
    connect(ui->pushButton_single_pump,&QPushButton::clicked,this,&MainWindow::on_single_pump_clicked);

    connect(ui->actionSaveAs,&QAction::triggered,this,&MainWindow::on_SaveAs_clicked);
    connect(ui->actionLoad,&QAction::triggered,this,&MainWindow::on_Load_clicked);


    m_dialog_getdbpara = new Dialog_GetDbPara;
    m_tracer = new QCPItemTracer(ui->customPlot);
    m_tracer->setVisible(true);
}

MainWindow::~MainWindow()
{
    delete ui;
    delete m_dialog_getdbpara;
}

void MainWindow::on_SetDbPara_clicked()
{

    m_dialog_getdbpara->Initialization(m_pumpDb.getDbPara(),m_pumpDb.getTableName());

    if(m_dialog_getdbpara->exec()==QDialog::Accepted)
    {
        m_pumpDb.setDbPara(m_dialog_getdbpara->GetDbPara());
        m_pumpDb.setTableName(m_dialog_getdbpara->GetDbTableName());
    }

}

void MainWindow::on_connect_clicked()
{
    if(m_pumpDb.connnect())
    {
        ui->pushButton_connect->setEnabled(false);

        QStringList family_list;
        m_pumpDb.getPumpFamilyList(&family_list);

        foreach(QString pump_family,family_list)
        {
            ui->comboBox_pumpFamily->addItem(pump_family);
        }

        QStringList motor_list;
        m_pumpDb.getMotorList(&motor_list);

        foreach(QString motor,motor_list)
        {
            ui->comboBox_motor->addItem(motor);
        }
     }
}

void MainWindow::on_family_changed()
{
    if(m_pumpDb.getConnectStatus())
    {
        QString family = ui->comboBox_pumpFamily->currentText();
        QStringList model_list;
        m_pumpDb.getPumpModelList(family,&model_list);

        QString pump_model;
        ui->comboBox_pumpModel->clear();
        foreach(pump_model,model_list)
             ui->comboBox_pumpModel->addItem(pump_model);
     }
}

void MainWindow::on_model_changed()
{
    if(m_pumpDb.getConnectStatus())
    {

        QString family = ui->comboBox_pumpFamily->currentText();
        QString model = ui->comboBox_pumpModel->currentText();

        QList<int> speed_list;
        m_pumpDb.getPumpSpeedList(family,model, &speed_list);

        ui->comboBox_pumpSpeed->clear();
        foreach(int pump_speed,speed_list)
        {
            ui->comboBox_pumpSpeed->addItem(QString::number(pump_speed));
        }

    }
}

void MainWindow::on_speed_changed()
{
    if(m_pumpDb.getConnectStatus())
    {
        QString family = ui->comboBox_pumpFamily->currentText();
        QString model = ui->comboBox_pumpModel->currentText();
        int speed = ui->comboBox_pumpSpeed->currentText().toInt();

        double bigImp,smallImp;
        m_pumpDb.getPumpImpRange(family,model,speed,&bigImp,&smallImp);
        ui->lineEdit_impRange->setText(QString::number(smallImp,'f',1)
                                       + " - " + QString::number(bigImp,'f',1));
    }
}

void MainWindow::on_motor_changed()
{
    if(m_pumpDb.getConnectStatus())
    {
        double power_rate = ui->comboBox_motor->currentText().toDouble();
        QList<int> poles_list;
        m_pumpDb.getMotorPolesList(power_rate, &poles_list);

        ui->comboBox_motor_poles->clear();
        foreach(int poles, poles_list)
        {
            ui->comboBox_motor_poles->addItem(QString::number(poles));
        }
    }
}

void MainWindow::on_update_clicked()
{

    get_system_config_from_ui();
    show_BES_pump_curve();

}

void MainWindow::on_single_pump_clicked()
{
    get_pump_config_from_ui();
    show_single_pump_curve();
}

void MainWindow::on_SaveAs_clicked()
{
    QString filename;
    QFileDialog fileDialog(this);
    filename = fileDialog.getSaveFileName(this,"Configuration save as...",QDir::currentPath(),"*.ini");
    if(filename=="")
        return;

    QSettings *configIniWrite = new QSettings(filename, QSettings::IniFormat);

    configIniWrite->setValue("/pump/family", ui->comboBox_pumpFamily->currentText());
    configIniWrite->setValue("pump/model", ui->comboBox_pumpModel->currentText());
    configIniWrite->setValue("pump/speed", ui->comboBox_pumpSpeed->currentText());
    configIniWrite->setValue("pump/impRange", ui->lineEdit_impRange->text());
    configIniWrite->setValue("pump/impTrimed", ui->lineEdit_impTrimed->text());
    configIniWrite->setValue("pump/motorPower", ui->comboBox_motor->currentText());
    configIniWrite->setValue("pump/motorPoles", ui->comboBox_motor_poles->currentText());

    configIniWrite->setValue("system/dutyPumps", ui->comboBox_duty_pumps->currentText());
    configIniWrite->setValue("system/totalFlow", ui->lineEdit_total_flow->text());
    configIniWrite->setValue("system/headAtZeroFlow", ui->lineEdit_head_zero_flow->text());
    configIniWrite->setValue("system/headAtTotalFlow", ui->lineEdit_head_total_flow->text());
    configIniWrite->setValue("system/controlCurveShaping", ui->lineEdit_control_curve_shaping->text());

    delete configIniWrite;
    QMessageBox::information(nullptr,"Save configuration","Save configuration succeed!");
}
void MainWindow::on_Load_clicked()
{
    QString filename;
    QFileDialog fileDialog(this);
    filename = fileDialog.getOpenFileName(this,"Load configuration...",QDir::currentPath(),"*.ini");
    if(filename=="")
        return;

    QSettings *configIniRead = new QSettings(filename, QSettings::IniFormat);

    ui->comboBox_pumpFamily->setCurrentText(configIniRead->value("/pump/family").toString());
    ui->comboBox_pumpModel->setCurrentText(configIniRead->value("pump/model").toString());
    ui->comboBox_pumpSpeed->setCurrentText(configIniRead->value("pump/speed").toString());
    ui->lineEdit_impRange->setText(configIniRead->value("pump/impRange").toString());
     ui->lineEdit_impTrimed->setText(configIniRead->value("pump/impTrimed").toString());
    ui->comboBox_motor->setCurrentText(configIniRead->value("pump/motorPower").toString());
    ui->comboBox_motor_poles->setCurrentText(configIniRead->value("pump/motorPoles").toString());

    ui->comboBox_duty_pumps->setCurrentText(configIniRead->value("system/dutyPumps").toString());
    ui->lineEdit_total_flow->setText(configIniRead->value("system/totalFlow").toString());
    ui->lineEdit_head_zero_flow->setText(configIniRead->value("system/headAtZeroFlow").toString());
    ui->lineEdit_head_total_flow->setText(configIniRead->value("system/headAtTotalFlow").toString());
    ui->lineEdit_control_curve_shaping->setText(configIniRead->value("system/controlCurveShaping").toString());

    delete configIniRead;
}
void MainWindow::get_pump_selection()
{
    m_pumpSelection.family = ui->comboBox_pumpFamily->currentText();
    m_pumpSelection.model = ui->comboBox_pumpModel->currentText();
    m_pumpSelection.speed = ui->comboBox_pumpSpeed->currentText().toInt();
    m_pumpSelection.impTrimed = ui->lineEdit_impTrimed->text().toDouble();
    m_pumpSelection.motorPower = ui->comboBox_motor->currentText();
    m_pumpSelection.motorPoles = ui->comboBox_motor_poles->currentText().toInt();
}

void MainWindow::get_motor_selection()
{
    m_motorSelection.power_rate = ui->comboBox_motor->currentText().toDouble();
    m_motorSelection.poles = ui->comboBox_motor_poles->currentText().toInt();
}

void MainWindow::get_system_design()
{
    m_sysPara.dutyPumps = ui->comboBox_duty_pumps->currentText().toInt();
    m_sysPara.designTotalFlow = ui->lineEdit_total_flow->text().toDouble();
    m_sysPara.headAtZeroFlow = ui->lineEdit_head_zero_flow->text().toDouble();
    m_sysPara.headAtTotalFlow = ui->lineEdit_head_total_flow->text().toDouble();
    m_sysPara.controlCurveShape = ui->lineEdit_control_curve_shaping->text().toDouble();
}

void MainWindow::show_BES_pump_curve()
{
    double max_y=0;
    double max_x=0;
    ui->customPlot->xAxis->setLabel("Flow (m3 / h)");
    ui->customPlot->yAxis->setLabel("Head (m)");


    QVector<double> x(101), y(101);

    ui->customPlot->clearGraphs();
    //ui->customPlot->clearTracers();
    QCPGraph    *graph;
    QCPItemText *text;

    // pump curve
    for(int j=0; j<m_sysPara.dutyPumps; j++)
    {
        for (int i=0; i<101; ++i)
        {
            double s_flow = m_pump.ReadPerformance().flow_max / 100 * i;
            x[i] = s_flow * (j+1);
            y[i] = m_pump.GetHeadFromFlow(50,s_flow);
        }
        graph = ui->customPlot->addGraph();
        graph->setData(x, y);
        graph->setPen(m_color[j]);
        graph->setName("Pump " + QString::number(j+1));

        //text = ui->customPlot->AddTracerText();
        //text->setPositionAlignment(Qt::AlignLeft);
        //text->setFont(QFont(font().family(), 9));
        //text->setPen(QPen(color[j]));
        //text->setPadding(QMargins(2,2,2,2));
    }

   // control curve
    max_y = m_pump.ReadPerformance().head_max;
    max_x = m_pump.ReadPerformance().flow_max * m_sysPara.dutyPumps;

    for (int i=0; i<101; ++i)
    {
        x[i] = m_sysPara.designTotalFlow / 100 * i;
        y[i] = m_pumpSys.GetControlCurve(x[i]);
        y[i] = y[i];
    }

    if(y[100]>max_y)
        max_y=y[100];

    if(x[100]>max_x)
        max_x=x[100];

    graph = ui->customPlot->addGraph();
    graph->setData(x, y);
    graph->setPen(QPen(m_color[m_sysPara.dutyPumps],2));
    graph->setName("System");
    ui->customPlot->replot();

    //text = ui->customPlot->AddTracerText();
    //text->setPositionAlignment(Qt::AlignLeft);
    //text->setFont(QFont(font().family(), 9));
    //text->setPen(QPen(color[m_sysPara.dutyPumps]));
    //text->setPadding(QMargins(2,2,2,2));

    //text = ui->customPlot->AddTracerText();
    //text->setPositionAlignment(Qt::AlignLeft);
    //text->setFont(QFont(font().family(), 9));
    //text->setPen(QPen(color[m_sysPara.dutyPumps+1]));
    //text->setPadding(QMargins(2,2,2,2));

    // set plot
    ui->customPlot->xAxis->setRange(0, max_x*1.2);
    ui->customPlot->yAxis->setRange(0, max_y*1.2);
    ui->customPlot->legend->setVisible(true);
}

void MainWindow::show_single_pump_curve()
{
    double max_y = 0;
    double max_x = 0;
    QVector<double> x(101), y(101),p(101),e(101);


    //ui->customPlot->clearTracers();

    /*if(m_tracer_text.size()>=1)
    {
        QCPItemText *text;
        foreach(text,m_tracer_text)
            delete text;
        m_tracer_text.clear();
    }*/
    //QCPItemText *text;

    ui->customPlot->clearGraphs();

    // flow-head
    QCPGraph *graph1,*graph2,*graph3;
    for (int i=0; i<101; ++i)
    {
        double s_flow = m_pump.ReadPerformance().flow_max / 100 * i;
        x[i] = s_flow;
        y[i] = m_pump.GetHeadFromFlow(50,s_flow);
        p[i] = m_pump.GetPowerFromFlow(50,s_flow);

        if(p[i]>0)
            e[i] = x[i] * y[i] * 9.8 / p[i] / 3600;

        if(y[i]>max_y) max_y=p[i];
        if(p[i]>max_y) max_y=p[i];
        if(e[i]>max_y) max_y=e[i];
    }

    graph1 = ui->customPlot->addGraph();
    graph1->setData(x, y);
    graph1->setPen(m_color[0]);
    graph1->setName("flow-head");

    graph2 = ui->customPlot->addGraph();
    graph2->setData(x, p);
    graph2->setPen(m_color[1]);
    graph2->setName("flow-power");

    graph3 = ui->customPlot->addGraph();
    graph3->setData(x, e);
    graph3->setPen(m_color[2]);
    graph3->setName("flow-efficiency");

    ui->customPlot->xAxis->setLabel("Flow (m3 / h)");
    ui->customPlot->yAxis->setLabel("Head (m)");

        //text = ui->customPlot->AddTracerText();
        //text->setPositionAlignment(Qt::AlignLeft);
        //text->setFont(QFont(font().family(), 9));
        //text->setPen(QPen(color[j]));
        //text->setPadding(QMargins(2,2,2,2));


    // set plot
    max_x = x[100];
    ui->customPlot->xAxis->setRange(0, max_x*1.5);
    ui->customPlot->yAxis->setRange(0, max_y*1.5);
    ui->customPlot->legend->setVisible(true);

    ui->customPlot->replot();
}

void MainWindow::get_system_config_from_ui()
{
    get_pump_config_from_ui();
    get_system_design();

    QString errorMessage;
    if(!m_pumpSys.SysParaValidation(m_sysPara,&m_pump,&errorMessage))
    {
        QMessageBox::warning(nullptr,"Get system parameter failed",errorMessage);
        return;
    }
    else
        m_pumpSys.WriteSysPara(m_sysPara);
}

void MainWindow::get_pump_config_from_ui()
{
    Pump::PerformData pumpPerformanceData = m_pump.ReadPerformance();
    Pump::MotorData motorData = m_pump.ReadMotorData();

    get_pump_selection();
    get_motor_selection();

    if(!m_pumpDb.getPumpData(m_pumpSelection,&pumpPerformanceData))
        return;
    else
        m_pump.WritePerformance_2(pumpPerformanceData);

    if(!m_pumpDb.getMotorData(m_motorSelection,&motorData))
        return;
    else
        m_pump.WriteMotorData(motorData);
}

